Modere Computer verwenden SRAM basierte Caches um die processor-memory gap zu überbrücken. 
Dies läuft besonders gut wenn man temporal locality und spatial locality beachtet. (Zeitliche und Örtliche Nähe von Daten ausnutzen)

Cache versucht Daten zu halten, welche häufig von CPU verwendet wird.

Örtliche Nähe: Greift man auf ein Element in einer Cacheline zu, so ist es sinnvoll auch auf die anderen Elemente in der Cacheline zuzugreifen. 
(Sonst wird Memory Bandwidth nicht gut genutzt)
Heißt: in einem gut geschriebenem Programm wird bei einer referenzierten Speicherstelle auch auf nahegelegene Elemente zugegriffen (in naher Zukunft)
Stichwort: Prefer Unit Stride Memory Access (Man greift auf aufeinanderfolgende Elemente zu)
Beispiel: Row or Column orientierter Zugriff auf Matrix (Je nachdem wären große Sprünge im Speicher notwendig)

Zeitliche Lokalität: Dinge, welche im Cache liegen sollen auch vom Algorithmus so genutzt werden, dass es zu einem großen „Reuse“ dieser Cacheline kommt.
Beispiel: Matrix Vektor Produkt (Aufteilung in Blöcke, welche dann häufig verwendet werden, sodass der Reuse groß ist)
