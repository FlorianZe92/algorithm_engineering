1) Heap-Stack
Es sollte nicht für jedes Element Speicher auf dem Heap angelegt werden. 
Unterschreitet der benötigte Speicher eine gewisse Größe, so könnte man per if-Abfrage sicherstellen, dass der Speicher auf dem Stack genutzt wird,
welcher günstiger ist.

2) Insertion Sort
Diese Art der Sortierung ist für kleinere Arrays effizienter als Merge Sort.

3) Parallelisierung
Durch das Erstellen von unabhängigen Arbeitspäckchen (Tasks), können mehrere Prozessoren gleichzeitig an dem Problem arbeiten. 

4) Multithreaded Merging
In der Kombinierungsphase verringert sich die Anzahl der verwendeten Threads bei steigender Arraygröße, was einer Performanceeinbuße entspricht.
Dies kann mit Multithreaded Merging optimiert werden. (Siehe multithreaded merging)

5) Speicher
Durch das Allokieren eines Speichers der Größe n (n=#Elemente in Array) können die Merge Operationen stets auf einem Speicherbereich angewandt werden. 
